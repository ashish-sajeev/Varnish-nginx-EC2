---
- name: "nginx with varnish caching"
  hosts: localhost
  connection: local
  vars:
    security_group: ash-webserver
    region: ap-south-1
    keypair: ash
    instance_type: t2.micro
    subnet_id: subnet-751a191d
    image: ami-08e76c6a76ebf6433
    mysqlinstance_image: ami-0b5bff6d9495eff69  
    aws_access_key: AKIAW4AVUN6KLJBN3D72
    aws_secret_key: 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
    nginx_port: 8080
    varnish_port: 80
    default: default
    mysql_root: ash123
    mysql_database: wordpress
    mysql_user: wordpress-user
    mysql_password: wordpress-user


  tasks:
    - name: Creating a security group
      ec2_group:
        name: "{{ security_group }}"
        description: webservers
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ region }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0

    - name: Create the web-server Instances
      ec2:
        region: "{{ region }}"
        group: "{{ security_group }}"
        key_name: "{{ keypair }}"
        instance_type: "{{ instance_type }}"
        image: "{{ image }}"
        vpc_subnet_id:
        wait: yes
        count: 1
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"

        instance_tags:
           Name: "webserver"
      register: ec2

    - name: Add web instance to host group webserver
      add_host:
        hostname: webserver
        ansible_host: "{{ item.public_ip }}"
        ansible_port: 22
        ansible_user: "ubuntu"
        ansible_ssh_private_key_file: "/home/ec2-user/ash.pem"
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"  
      with_items: "{{ ec2.instances }}" 
    
    - name: Waiting for OpenSSH to open"
      wait_for:
        port: 22
        host: "{{ ec2.instances.0.public_ip }}"
        timeout: 80
        state: started
        delay: 10
        
    - name: Create the DB-server Instances
      ec2:
        region: "{{ region }}"
        group: "{{ security_group }}"
        key_name: "{{ keypair }}"
        instance_type: "{{ instance_type }}"
        image: "{{ mysqlinstance_image }}"
        vpc_subnet_id:
        wait: yes
        count: 1
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"

        instance_tags:
           Name: "DB"
      register: ec2_DB

    - name: Add DB instance to host group
      add_host:
        hostname: dbserver
        ansible_host: "{{ item.public_ip }}" 
        ansible_port: 22
        ansible_user: "ec2-user"
        ansible_ssh_private_key_file: "/home/ec2-user/ash.pem"
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"  
      with_items: "{{ ec2_DB.instances }}" 
    
    - name: Waiting for OpenSSH to open"
      wait_for:
        port: 22
        host: "{{ ec2_DB.instances.0.public_ip }}"
        timeout: 80
        state: started
        delay: 10
        
     
    - name: "nginx installation"
      delegate_to: webserver
      become: yes
      apt: name=nginx state=latest
    
    - name: "changing port"
      delegate_to: webserver
      become: yes
      template:  
        src: default.tmpl
        dest: /etc/nginx/sites-available/default

    - name: "restart nginx"
      delegate_to: webserver
      become: yes
      service:
          name: nginx
          state: reloaded

    - name: varnish installation
      delegate_to: webserver
      become: yes
      apt: name=varnish state=latest update_cache=yes
    
    - name: changing varnish port in /etc/varnish/default.vcl
      delegate_to: webserver
      become: yes
      template:
        src: default.j2
        dest: /etc/varnish/default.vcl
    
    - name: chaning varnish port in /etc/default/varnish
      delegate_to: webserver
      become: yes
      template:
        src: varnish.tmpl
        dest: /etc/default/varnish       
    
    - name: "changing varnish.service port"
      delegate_to: webserver
      become: yes
      template:
        src: varnish.j2 
        dest: /lib/systemd/system/varnish.service                        

    - name: Ensure systemd is reloaded if varnish.service has changed
      delegate_to: webserver
      become: yes
      shell: systemctl daemon-reload 
    
    - name: restart varnish
      delegate_to: webserver
      become: yes
      shell: systemctl restart varnish

    - name: "Mariadb-Server - Installation"
      delegate_to: dbserver
      become: yes
      yum:
        name:
          - mariadb-server
          - MySQL-python
        state: present
    
    - name: "Mariadb-Server - Restarting & Enabling"
      delegate_to: dbserver 
      become: yes
      service:
        name: mariadb
        state: restarted
        enabled: true
            
    - name: "Mariadb-Server - Resetting Root Password"
      delegate_to: dbserver
      become: yes
      ignore_errors: true
      mysql_user:
        login_user: "root"
        login_password: ""
        user: "root"
        password: "{{ mysql_root }}"
        host_all: yes
    
    - name: "Mariadb-server - Removing anonymous users"
      delegate_to: dbserver
      become: yes
      mysql_user:
        login_user: "root"
        login_password: "{{ mysql_root }}"
        user: ""
        state: absent
            
            
    - name: "Mariadb-server - creating additional database"
      delegate_to: dbserver
      become: yes
      mysql_db:
        login_user: "root"
        login_password: "{{ mysql_root }}"
        name: "{{ mysql_database }}"
        state: present
            
    - name: "Mariadb-server - creating additional database"
      delegate_to: webserver
      become: yes
      mysql_user:
        login_user: "root"
        login_password: "{{ mysql_root }}"
        user: "{{ mysql_user }}"
        password: "{{ mysql_password }}"
        state: present
        priv: "{{ mysql_database }}.*:ALL" 
    
    - 
